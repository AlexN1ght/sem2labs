
ilya@ilya-VirtualBox:~/sanya:*/sem2labs/23$ cat GTree.h 
#ifndef _GTREE_H_
#define _GTREE_H_

typedef int GTdata;

typedef struct GTnode {
	GTdata data;
	struct GTnode *son;
	struct GTnode *brother;
} GTnode;

void print_gtree(GTnode *n);
GTnode *create_node(int a);
GTnode* add_node(GTnode **node, const char *a);
void del_node_supp(GTnode **n);
int del_node(GTnode **n, const char* comm);
GTnode** node_path(GTnode** node, const char* a);
int max_i_deep(GTnode *n);

#endif
ilya@ilya-VirtualBox:~/sanya:*/sem2labs/23$ cat gtree.c
#include"GTree.h"
#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

GTnode *create_node(int a)
{
  GTnode *node = (GTnode *)malloc(sizeof(GTnode));
  node->data = a;
  node->son = NULL;
  node->brother = NULL;
  return node;
}

GTnode* to_son(GTnode *n)
{
	return n->son;
}

GTnode* to_brother(GTnode *n)
{
	return n->brother;
}

GTnode* last_son(GTnode *n)
{
	n = n->son;
	while (n->brother) {
		n = n->brother;
	}
	return n;
}

GTnode* add_node(GTnode **node, const char *a) {
  GTnode* t = *node;
  int value;
  scanf("%d", &value);
  getchar();
  int i = -1;
      while (a[++i] != '\0') {
        if (a[i] == 'r') {
            *node = create_node(value);
            return *node;
          }
        if (a[i] == 's') {
        	t = to_son(t);
        	if (t) {
            	continue;
          	}
          	return NULL;
        }
        if (a[i] == 'b') {
        	t = to_brother(t);
        	if (t) {
          		continue;
          	}
          	return NULL;
        }
    }
    if (t->son != NULL) {
    	t = last_son(t);
    	t->brother = create_node(value);
    	return t->brother;
    } else {
     	t->son = create_node(value);
     	return t->son;
    }
}

GTnode** node_path(GTnode** tree, const char* a)
{
	GTnode **node = tree;
	int i = -1;
      while (a[++i] != '\0') {
      	if (a[i] == 'r') {
      		return tree;
      	}
        if (a[i] == 's') {
        	node = &((*node)->son);
        	if (*node == NULL) {
            	return NULL;
          	}
        }
        if (a[i] == 'b') {
        	node = &((*node)->brother);
        	if (*node == NULL) {
            	return NULL;
          	}
        }
	}
	return node;
}

void del_node_supp(GTnode **n)
{	
	if ((*n)->son != NULL) {
		del_node_supp(&((*n)->son));
	}
	if ((*n)->brother != NULL) {
		del_node_supp(&((*n)->brother));
	}
	free(*n);
	*n = NULL;
}

int del_node(GTnode **tree, const char* comm)
{
	
	GTnode **n = node_path(tree, comm);
	if (n == NULL || tree == NULL) {
		return 0;
	}
	if ((*n)->son) {
		del_node_supp(&((*n)->son));
	}
	if ((*n)->brother) {
		GTnode *tmpdel = *n;
		*n = (*n)->brother;
		free(tmpdel);
	} else {
		if (n == tree) {
			free(*n);
			*n = NULL;
			return -1;
		}
		free(*n);
		*n = NULL;
	}
	return 1;
}

void print_gtree_supp(GTnode *n, int deep)
{	
	for (int i = 0; i < deep; i++) {
		putchar('\t');
	}
	printf("%d\n", n->data);  
	if (n->son != NULL) {
		print_gtree_supp(n->son, deep + 1);
	}
	if (n->brother != NULL) {
		print_gtree_supp(n->brother, deep);
	}
}

void print_gtree(GTnode *n)
{
	print_gtree_supp(n, 0);
}


void max_i_deep_supp(GTnode *n, int deep, int *max_deep, GTdata *max)
{	
	if (*max <= n->data) {
		*max = n->data;
		*max_deep = deep;
	}
	if (n->son != NULL) {
		max_i_deep_supp(n->son, deep + 1, max_deep, max);
	}
	if (n->brother != NULL) {
		max_i_deep_supp(n->brother, deep, max_deep, max);
	}
}

int max_i_deep(GTnode *n)
{
	int max_deep = 0;
	GTdata max = INT_MIN;
	max_i_deep_supp(n, 0, &max_deep, &max);
	return max_deep;
}
ilya@ilya-VirtualBox:~/sanya:*/sem2labs/23$ cat main.c
#include<stdio.h>
#include"GTree.h"

enum state {
	space,
	add_path,
	print,
	other,
	delete_node,
	quit,
	deep_of_max_i
};

int is_space(char c) 
{
	return (c == ' ' || c == '\t' || c == '\n');
}

int main(void)
{
	enum state st = space;
	char comm[20];
	char c = 0;
	int root = 0;
	int a = 0;
	GTnode *tree;
	while (c != EOF) {
	c = getchar();
		switch (st) {
			case space:
				if (c == '+') {
					st = add_path;
				} else if (c == '-') {
					st = delete_node;
				} else if (c == 'p') {
					st = print;
				} else if (is_space(c)) {
					st = space;
				} else if (c == 'q') {
					st = quit;
				} else if (c == 'd') {
					st = deep_of_max_i;
				} else {
					st = other;
				}
				break;
			case add_path:
				if (c == 's' || c == 'b') {
					comm[a] = c;
					a++;
				} else if (c == 'r' && !root) {
					comm[a] = c;
					a++;
					root = 1;
				} else if (is_space(c)) {
					comm[a] = '\0';
					if (root) {
						if (add_node(&tree, comm) == NULL) {
							puts("?");
						}
					}
					a = 0;
					st = space;
				} else {
					st = other;
					a = 0;
				}
				break;
			case delete_node:
				if (c == 's' || c == 'b' || c == 'r') {
					comm[a] = c;
					a++;
				} else if (is_space(c)) {
					comm[a] = '\0';
					if (root) {
						switch (del_node(&tree, comm)){
							case 0:
								puts("?");
								break;
							case -1:
								root = 0;
								break;
						}
					} else {
						puts("?");
					}
					a = 0;
					st = space;
				} else {
					st = other;
					a = 0;
				}
				break;
			case print:
				if (is_space(c)) {
					if (root) {
						print_gtree(tree);
					} else {
						puts("?");
					}
					st = space;
				} else {
					st = other;
				}
				break;
			case deep_of_max_i:
				if (is_space(c)) {
					if (root) {
						printf("%d\n", max_i_deep(tree));
					}
					st = space;
				} else {
					st = other;
				}
				break;
				break;
			case quit:
				del_node(&tree, "r");
				return 0;
				break;
			case other:
				if (is_space(c)) {
					puts("?");
					st = space;
				}
				break;
		}
	}
}

ilya@ilya-VirtualBox:~/sanya:*/sem2labs/23$ make
gcc -Wall -pedantic  -std=c99 -c gtree.c
gcc  -o main.out main.o gtree.o
ilya@ilya-VirtualBox:~/sanya:*/sem2labs/23$ valgrind ./main.out
==3141== Memcheck, a memory error detector
==3141== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3141== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==3141== Command: ./main.out
==3141== 
+r
0
+ 5
+ 8
+ 45
+ 2
+s 4
+sbb 52
+sbbs 24
+sbb 2
p
0
	5
		4
	8
	45
		52
			24
		2
	2
d
2
-sbbs
p
0
	5
		4
	8
	45
		2
	2
d
1
+sbbbsbsb
5
?
p
0
	5
		4
	8
	45
		2
	2
-sbbbsbsbbs
?
q
==3141== 
==3141== HEAP SUMMARY:
==3141==     in use at exit: 0 bytes in 0 blocks
==3141==   total heap usage: 11 allocs, 11 frees, 2,264 bytes allocated
==3141== 
==3141== All heap blocks were freed -- no leaks are possible
==3141== 
==3141== For counts of detected and suppressed errors, rerun with: -v
==3141== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

